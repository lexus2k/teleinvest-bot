#!/usr/bin/python3

import logging
import signal
import requests
import time
import os
import configparser
import sys
import argparse
import datetime
import trade_bot

def millis():
    return round(time.time() * 1000)

# Let's prepare loggin system. Not necessary and can be removed alone with all <logger.> calls
# Create format for the log messages
logFormatter = logging.Formatter("%(asctime)s [%(levelname)-4.4s]  %(message)s")
logger = logging.getLogger("tele_bot")
# Let's capture all logger messages
logger.setLevel( logging.INFO )

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
# Constole will print only warnings and errors
consoleHandler.setLevel(logging.WARNING)
logger.addHandler(consoleHandler)

fileHandler = logging.FileHandler("telegram_bot.log")
fileHandler.setFormatter(logFormatter)
# Log file will contain all messages generated by the logger
fileHandler.setLevel(logging.INFO)
logger.addHandler(fileHandler)

# Simple function for sending message to specific chat
def telegram_send(token, msg, chat_id=None):
    # If no sender, just send to group chat, or personalized chat
    if chat_id is None:
        chat_id = main_chat_id
    if chat_id is None or token is None:
        return
    host = "https://api.telegram.org/bot" + token + "/sendMessage"
    try:
        result = requests.post(host, data = {"chat_id": chat_id, "text": msg, "disable_notification": "1"}, timeout=1)
        result = result.json()
    except:
        result = None
    # print(result)
    return result

# Simple function to read updates for specific bot
def telegram_update(token, offset=0):
    host = "https://api.telegram.org/bot" + token + "/getUpdates"
    try:
        result = requests.post(host, data = {"offset": str(offset)}, timeout=2)
        result = result.json()
    except:
        result = None
    return result

def process_text_message(token, msg, chat_id):
    # This is for example, just some emoji icons to use in a text messages
    green_emoji = u'\U0001F49A'
    blue_emoji = u'\U0001F499'
    red_emoji = u'\U0001F4A5'
    logger.info( msg )
    if msg.upper() == "REPORT":
        msg = trade_bot.generate_stats_message( main_doc )
        if msg != "":
            telegram_send( token, msg, chat_id )
    else:
        msg = trade_bot.generate_info_message( msg.upper() )
        if msg != "":
            telegram_send( token, msg, chat_id )

telegram_bot_token = None
main_chat_id = None
main_doc = None

config = configparser.ConfigParser()
if len( config.read( 'config.ini')) > 0:
    if config.has_option('main', 'telegram_bot_token'):
        telegram_bot_token = config.get('main', 'telegram_bot_token')
    if config.has_option('main', 'main_chat_id'):
        main_chat_id = config.get('main', 'main_chat_id' )
    if config.has_option('main', 'sheets'):
        main_doc = config.get('main', 'sheets')

exit_requested = False

def exit_gracefully(signum, frame):
    global exit_requested
    logger.error("SIGTERM received")
    exit_requested = True

signal.signal(signal.SIGINT, exit_gracefully)
signal.signal(signal.SIGTERM, exit_gracefully)

logger.info("Bot started")

# Receive all unconfirmed messages
update_id = 0
report_sent = False
report_time = ["5:30", "21:00", "10:00"]

while not exit_requested:
    result = telegram_update(telegram_bot_token, offset = update_id)
    if result is not None and result['result'] is not None:
        for record in result['result']:
            update_id = int(record['update_id']) + 1
            if "message" in record:
                 branch = "message"
            elif "channel_post" in record:
                 branch = "channel_post"
            else:
                 # If the update information doesn't contain any message Skip
                continue
            if "text" not in  record[branch]:
                 # If the update information doesn't contain any text in the message Skip
                continue
            text = record[branch]['text']
            chat = record[branch]['chat']['id']
            if branch == "message":
                sender = record[branch]['from']['id']
            else:
                sender = record[branch]['sender_chat']['id']
            process_text_message( telegram_bot_token, text, chat )
    now = datetime.datetime.now()
    clear_report_flag = True
    for t in report_time:
        h = int(t.split(':')[0])
        m = int(t.split(':')[1])
        if now.hour == h and now.minute == m:
            clear_report_flag = False
            if not report_sent:
                msg = trade_bot.generate_stats_message( main_doc )
                if msg != "":
                    report_sent = True
                    telegram_send( telegram_bot_token, msg)
    if clear_report_flag:
            report_sent = False





